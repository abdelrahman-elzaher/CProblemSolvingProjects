///task 0 sheet 4
#include <stdio.h>
#include <stdlib.h>
#define FirstBigger 1
#define SecondBigger 2
#define Equal 0
void BubbleSort_PointerOfArray(char **arr,int size)
{
    int i,j;
    for(int i=0;i<size;i++)
    {
        for(int j=0;j<size-i-1;j++)
        {
            if(CmprString(arr[j],arr[j+1])==FirstBigger)
                Swap_Pointers(&arr[j],&arr[j+1]);
        }
    }
}
int CmprString(char *Str,char *Str2)
{
    char FirstStr;
    char SecondStr;
    for(int i=0;Str[i]||Str2[i];i++)
    {

        if(Str[i]>='A')
            FirstStr=(Str[i]-'A'+'a');
        else
            FirstStr=Str[i]; //to not be case sensitve
        if(Str2[i]>='A')
            SecondStr=(Str2[i]-'A'+'a');
        else
            SecondStr=Str2[i]; //to not be case sensitive
        if(FirstStr>SecondStr)
            return FirstBigger;
        if(SecondStr>FirstStr)
            return SecondBigger;
    }
    return Equal;
}
void Swap_Pointers(char **Ptr1,char **Ptr2)
{
    char *temp;
    temp=*Ptr1;
    *Ptr1=*Ptr2;
    *Ptr2=temp;
}
int SearchBinary_ArrayOfPointer(char **arr,int size,char *Name)
{
    int l=0;
    int high=size-1;
    int mid=(l+high)/2;
    while(l<=high)
    {
        mid=(l+high)/2;
        if(CmprString(arr[mid],Name)==Equal)
            return mid;
        else if(CmprString(arr[mid],Name)==FirstBigger)
        {
            high=mid-1;
        }
        else if(CmprString(arr[mid],Name)==SecondBigger)
            l=mid+1;
    }
    return -1;
}
int main()
{
    char *arrr[]={"Rasha","abdelrahman","kareem","abdo"};
    BubbleSort_PointerOfArray(&arrr,sizeof(arrr)/sizeof(arrr[0]));
    printf("\n$$$$$$$$$$$$$$\n");
    for(int i=0;i<4;i++)
    {
        printf("%s\n",arrr[i]);
    }
    int index=SearchBinary_ArrayOfPointer(&arrr,sizeof(arrr)/sizeof(arrr[0]),"kareem");
    printf("%s",arr);


////////////////////////////////////////////////////////

#include <stdio.h>
#include <stdlib.h>
//task1 sheet 4
void ReverseString(char *Str)
{
    int Len=strlen(Str);
    char temp;
    for(int i=0;i<Len/2;i++)
    {
        temp=Str[i];
        Str[i]=Str[Len-i-1];
        Str[Len-i-1]=temp;
    }
}
void PrintString(char *Str)
{
    int i=0;
    while(Str[i]!=0)
       {
          printf("%c",Str[i]);
          i++;
       }
}
int main()
{
    char arr[]="ahmed salem";
    ReverseString(arr);
    PrintString(arr);
    return 0;
}
////////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
//task2 sheet 4
int CheckMirror(char *Str)
{
    int Len=strlen(Str);
    char temp;

    for(int i=0;i<=Len/2;i++)
    {
        if(Str[i]!=Str[Len-i-1])
            return 0;
    }
    return 1;
}

int main()
{
    char arr[]="SalelaS";
    printf("%d",CheckMirror(arr));

    return 0;
}
//////////////////////////////////////////////////////////////////////////////////
#include <stdio.h>
#include <stdlib.h>
//task3 sheet 4
void ReverseString(char *Str)
{
    int Len=strlen(Str);
    char temp;
    for(int i=0;i<Len/2;i++)
    {
        temp=Str[i];
        Str[i]=Str[Len-i-1];
        Str[Len-i-1]=temp;
    }
}
void ReverseWord(char  *Str,int begin,int end)
{
    int temp;
    for(int i=0;i<(end-begin)/2;i++)
    {
        temp=Str[i+begin];
        Str[i+begin]=Str[end-i-1];
        Str[end-i-1]=temp;
    }
}
void ReverseWords(char  *Str)
{
    ReverseString(Str);
        int begin=0,end=0;
    while(Str[end]!=0)
    {
        if(Str[end]==' ')
        {
            ReverseWord(Str,begin,end);
            begin=end+1;
        }
        end++;
    }

    ReverseWord(Str,begin,end);
}
void PrintString(char *Str)
{
    int i=0;
    while(Str[i]!=0)
       {
          printf("%c",Str[i]);
          i++;
       }
}
int main()
{
    char arr[]="i work as an   embedded software engineer for 3 years";
    ReverseWords(arr);
    PrintString(arr);
    return 0;
}
/////////////////////////////////////////////////////
///sheet4 task 4
#include <stdio.h>
#include <stdlib.h>
int ConvertNums(char *Str,int *Counts)
{
    int Num=0;
    int CountDigitNums=1;
    int i=0;
      for( ; Str[i]>='0' &&Str[i]<='9';i++);
          *Counts=i;

    for(i=i-1; Str[i]>='0' &&Str[i]<='9';i--)
    {
        Num=Num+CountDigitNums*(Str[i]-'0');
        CountDigitNums=CountDigitNums*10;
    }
    return Num;
}
char *CheckTriangle(int num1,int num2,int num3)
{

    if((num1+num2>num3)&&(num2+num3>num1) &&(num3+num1>num2))
    {
    if( (num1==num2) && (num1==num3) )
        return "Equilateral triangle";
    if(num1==num2 || num1==num3 || num2==num3)
        return "Isosceles triangle";

    return "Scalene triangle";


    }
    else
        return "Not triangle";



}
char *TriangleFromString(char *Str)
{
    int BeginNumber=0;
    int Num1=0;
    int Num2=0;
    int Num3=0;
    int Counts;
    Num1=ConvertNums(&Str[BeginNumber],&Counts);
    BeginNumber=BeginNumber+Counts+1;
    Num2=ConvertNums(&Str[BeginNumber],&Counts);
    BeginNumber=BeginNumber+Counts+1;
    Num3=ConvertNums(&Str[BeginNumber],&Counts);
    BeginNumber=BeginNumber+Counts+1;
    return CheckTriangle(Num1,Num2,Num3);

}
int main()
{
    printf("%s",TriangleFromString("5 3 4"));
    return 0;
}

//////////////////////////
#include <stdio.h>
#include <stdlib.h>
//task5 sheet 4
void ConvertFloat(float Number,char *ConvertedFloat)
{
    int Temp=Number;
    int Count=0;
    if(Temp==0)
    {
        ConvertedFloat[0]='0';
        ConvertedFloat[1]=0;
        return;
    }
    while(Temp!=0)

    {
        ConvertedFloat[Count]=Temp%10+'0';
        Count++;
        Temp=Temp/10;

    }

    ReverseWord(ConvertedFloat,0,Count);
    Temp=Number;
    if(Number-Temp<=(float)0.0005)
    {
        ConvertedFloat[Count]=0;
        return;
    }
    ConvertedFloat[Count]='.';
    Count++;
    int Begin=Count;
    Temp=(Number-Temp)*1000000;
    while(Temp%10==0)
        Temp=Temp/10;
    while(Temp!=0)

    {
        ConvertedFloat[Count]=Temp%10+'0';
        Count++;
        Temp=Temp/10;

    }
        ConvertedFloat[Count]=0;
        ReverseWord(ConvertedFloat,Begin,Count);
}

void ReverseWord(char  *Str,int begin,int end)
{
    int temp;
    for(int i=0;i<(end-begin)/2;i++)
    {
        temp=Str[i+begin];
        Str[i+begin]=Str[end-i-1];
        Str[end-i-1]=temp;
    }
}

void PrintString(char *Str)
{
    int i=0;
    while(Str[i]!=0)
       {
          printf("%c",Str[i]);
          i++;
       }
}
int main()
{
    char arr[100];
    ConvertFloat((float)3.45,arr);
    PrintString(arr);
    return 0;
}
//////////////////////////////
//sheet 4 task 6
#include <stdio.h>
#include <stdlib.h>

char *StringReplace(char *MainString,char *Replace,char *Find)
{
  char *NewString=malloc(sizeof(char)*strlen(MainString)+sizeof(char)*strlen(Replace));
  int BeginFoundString=0;
  int LastFoundString=0;
  int indexOfNewString=0;
  int indexOfFind=0;
  int indexOfOldString=0;
  for( indexOfOldString=0;MainString[indexOfOldString];(indexOfOldString++,indexOfNewString++))
  {



      if(Find[indexOfFind]==MainString[indexOfOldString])
      {
          indexOfFind++;
      }
      else
      {
          if(indexOfFind==strlen(Find)) //if the word in string equal to find then replace
          {
              indexOfNewString=indexOfNewString-indexOfFind; //go back n times of word we found in the string to replace 
                                                                //it as we need to overwrite it
              for(int i=0;i<strlen(Replace);(i++,indexOfNewString++)) //put the Replace word in our string
                    {
                        NewString[indexOfNewString]=Replace[i];
                    }
             /*if the found word bigger than we want to 
                replace we need to put null to make sure it 
                replace succefully because in our algorithm 
                we write the word first then check 
                if it found word replace it and remove the 
                old data because of the found word we have written
            if not (replace word is bigger it is already overwirten on the old one)*/
                for(int i=0;i<strlen(Find)-strlen(Replace);i++)
              {
                   NewString[indexOfNewString+i]=0;
              }

          }
        indexOfFind=0;

      }
          NewString[indexOfNewString]=MainString[indexOfOldString];//put the string char in our new string regerdless if it is found word or not

  }
  
  
  
  
  ///for the last word if it equal replace
    if(indexOfFind==strlen(Find))
          {
              indexOfNewString=indexOfNewString-indexOfFind;
              for(int i=0;i<strlen(Replace);(i++,indexOfNewString++))
                    {
                        NewString[indexOfNewString]=Replace[i];
                    }
              for(int i=0;i<strlen(Find)-strlen(Replace);i++)
              {
                   NewString[indexOfNewString+i]=0;
              }

          }
  NewString[indexOfNewString]=0;
  return NewString;
}
int main()
{
    printf("%s",StringReplace("ahmed ahmed mohamedahmed ahmed","aym","ahmed"));
    return 0;
}




















///////////////////////////
///sheet4 task 7
#include <stdio.h>
#include <stdlib.h>
int ConvertNums(char *Str,int *Counts)
{
    int Num=0;
    int CountDigitNums=1;
    int i=0;
      for( ; Str[i]>='0' &&Str[i]<='9';i++);
          *Counts=i;

    for(i=i-1; Str[i]>='0' &&Str[i]<='9';i--)
    {
        Num=Num+CountDigitNums*(Str[i]-'0');
        CountDigitNums=CountDigitNums*10;
    }
    return Num;
}
void StringWordsTimes(char *Str)
{
    int BeginWord=0;
    int Nums=0;
    int Counts;
    for(int i=0;Str[i];i++)
    {

        if(Str[i]==','&&(Str[i+1]>='0'&&Str[i+1]<='9'))
        {
            Nums=ConvertNums(&Str[i+1],&Counts);
            StringTimes(&Str[BeginWord],',',Nums);
            i=i+Counts+2;
            BeginWord=i;

        }

    }
}
void StringTimes(char *Str,char EndChar,int Ntimes)
{
    for(int j=0;j<Ntimes;j++)
    {
        for(int i=0;!(Str[i]==','&&Str[i+1]!=',');i++)
        {
            printf("%c",Str[i]);
        }
        printf("       ");
    }
    printf("\n");

}
int main()
{
    StringWordsTimes("ahmed,5,abdo,2,mohamed,,,,4");
    printf("Hello world!\n");
    return 0;
}
